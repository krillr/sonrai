// Generated by CoffeeScript 1.7.1
(function() {
  var Databases, Errors, EventEmitter, Fields, Model, Query, Utils,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = (function() {
    EventEmitter.listeners = {};

    EventEmitter.on = function(event, cb) {
      if (this.listeners[event] == null) {
        this.listeners[event] = [];
      }
      if (__indexOf.call(this.listeners[event], cb) < 0) {
        return this.listeners[event].push(cb);
      }
    };

    EventEmitter.unbind = function(event, cb) {
      var _ref;
      if (this.listeners[event] == null) {
        return;
      }
      if (_ref = !cb, __indexOf.call(this.listeners[event], _ref) >= 0) {
        return;
      }
      return this.listeners[event].splice(this.listeners[event].indexOf(cb), 1);
    };

    EventEmitter.emit = function() {
      var args, event, listener, _i, _len, _ref, _results;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref = this.listeners[event] || [];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        _results.push(listener.apply(this, args));
      }
      return _results;
    };

    function EventEmitter() {
      this.listeners = {};
    }

    EventEmitter.prototype.on = function(event, cb) {
      if (this.listeners[event] == null) {
        this.listeners[event] = [];
      }
      if (__indexOf.call(this.listeners[event], cb) < 0) {
        return this.listeners[event].push(cb);
      }
    };

    EventEmitter.prototype.unbind = function(event, cb) {
      var _ref;
      if (this.listeners[event] == null) {
        return;
      }
      if (_ref = !cb, __indexOf.call(this.listeners[event], _ref) >= 0) {
        return;
      }
      return this.listeners[event].splice(this.listeners[event].indexOf(cb), 1);
    };

    EventEmitter.prototype.emit = function() {
      var args, event, listener, _i, _len, _ref, _results;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref = this.listeners[event] || [];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        _results.push(listener.apply(this, args));
      }
      return _results;
    };

    return EventEmitter;

  })();

  Errors = {};

  Errors.ValidationFailed = (function(_super) {
    __extends(ValidationFailed, _super);

    function ValidationFailed(value) {
      this.message = 'Invalid value: ' + value;
    }

    return ValidationFailed;

  })(Error);

  Errors.ModelNotInstantiated = (function(_super) {
    __extends(ModelNotInstantiated, _super);

    function ModelNotInstantiated() {
      return ModelNotInstantiated.__super__.constructor.apply(this, arguments);
    }

    ModelNotInstantiated.prototype.message = "Model must be instantiated to a database item to use this function.";

    return ModelNotInstantiated;

  })(Error);

  Errors.FieldDoesNotExist = (function(_super) {
    __extends(FieldDoesNotExist, _super);

    function FieldDoesNotExist(fieldName) {
      this.message = "Field '" + fieldName + "' does not exist.";
    }

    return FieldDoesNotExist;

  })(Error);

  Errors.InvalidOperator = (function(_super) {
    __extends(InvalidOperator, _super);

    function InvalidOperator(operator) {
      this.message = "Invalid operator: " + operator;
    }

    return InvalidOperator;

  })(Error);

  Utils = {
    intersect: function(arr1, arr2) {
      var intersection, x, _i, _len;
      intersection = [];
      for (_i = 0, _len = arr1.length; _i < _len; _i++) {
        x = arr1[_i];
        if (__indexOf.call(arr2, x) >= 0) {
          intersection.push(x);
        }
      }
      return intersection;
    },
    exclude: function(arr1, arr2) {
      var exclusion, x, _i, _len;
      exclusion = [];
      for (_i = 0, _len = arr1.length; _i < _len; _i++) {
        x = arr1[_i];
        if (__indexOf.call(arr2, x) < 0) {
          exclusion.push(x);
        }
      }
      return exclusion;
    },
    extend: function(obj1, obj2) {
      var k, v, _results;
      _results = [];
      for (k in obj2) {
        v = obj2[k];
        _results.push(obj1[k] = v);
      }
      return _results;
    },
    rand: function(x) {
      return Math.floor(Math.random() * x);
    },
    uuid: function() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    }
  };

  Databases = {};

  Databases.BaseDatabase = (function(_super) {
    __extends(BaseDatabase, _super);

    function BaseDatabase() {}

    BaseDatabase.prototype.operators = {
      'gte': function(v1, v2) {
        return v2 >= v1;
      },
      'gt': function(v1, v2) {
        return v2 > v1;
      },
      'lte': function(v1, v2) {
        return v2 <= v1;
      },
      'lt': function(v1, v2) {
        return v2 < v1;
      }
    };

    BaseDatabase.prototype.save = function(modelName, object) {};

    BaseDatabase.prototype["delete"] = function(modelName, object) {};

    BaseDatabase.prototype.deleteQuery = function(modelName, query) {
      var object, objects, _i, _len;
      objects = this.fetch(modelName, query);
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        this["delete"](modelName, object.id);
      }
    };

    return BaseDatabase;

  })(EventEmitter);

  Databases.InMemoryDatabase = (function(_super) {
    __extends(InMemoryDatabase, _super);

    function InMemoryDatabase() {
      InMemoryDatabase.__super__.constructor.apply(this, arguments);
      this.models = {};
    }

    InMemoryDatabase.prototype.save = function(modelName, object) {
      if (this.models[modelName] == null) {
        this.models[modelName] = {};
      }
      this.models[modelName][object.get('id')] = object.serialize();
    };

    InMemoryDatabase.prototype["delete"] = function(modelName, id) {
      return delete this.models[modelName][id];
    };

    InMemoryDatabase.prototype.fetch = function(modelName, query) {
      var add, fieldName, filtered, k, obj, operator, options, v, value, _ref, _ref1, _ref2;
      filtered = [];
      _ref = this.models[modelName];
      for (k in _ref) {
        v = _ref[k];
        add = true;
        _ref1 = query.filters;
        for (fieldName in _ref1) {
          options = _ref1[fieldName];
          if (options instanceof Array) {
            if (_ref2 = v[fieldName], __indexOf.call(options, _ref2) < 0) {
              add = false;
              break;
            }
          } else if (options instanceof Object) {
            for (operator in options) {
              value = options[operator];
              if (!this.operators[operator](value, v[fieldName])) {
                add = false;
                break;
              }
            }
          } else {
            if (v[fieldName] !== options) {
              add = false;
              break;
            }
          }
          if (!add) {
            break;
          }
        }
        if (add) {
          obj = new query.model();
          obj.deserialize(JSON.parse(JSON.stringify(v)));
          filtered.push(obj);
        }
      }
      return filtered;
    };

    return InMemoryDatabase;

  })(Databases.BaseDatabase);

  Model = (function(_super) {
    __extends(Model, _super);

    Model.db = null;

    function Model(data) {
      var fieldName, fieldObject, _ref;
      this.data = data;
      this.fields = {};
      this.data = this.data || {};
      _ref = this._fields;
      for (fieldName in _ref) {
        fieldObject = _ref[fieldName];
        this.fields[fieldName] = new fieldObject(this);
        if (this.data[fieldName] != null) {
          this.set(fieldName, this.data[fieldName]);
        }
      }
      if (this.fields['id'] == null) {
        this.fields['id'] = new (Fields.UUIDField({
          "default": Utils.uuid
        }))(this);
      }
    }

    Model.prototype.name = function() {
      return this.constructor.name;
    };

    Model.prototype.db = function() {
      return this.constructor.db;
    };

    Model.prototype.set = function(fieldName, value) {
      var field;
      if (!this.fields[fieldName]) {
        throw new Errors.FieldDoesNotExist(fieldName);
      }
      field = this.fields[fieldName];
      return field.set(value);
    };

    Model.prototype.get = function(fieldName) {
      if (!this.fields[fieldName]) {
        throw new Errors.FieldDoesNotExist(field);
      }
      return this.fields[fieldName].get();
    };

    Model.prototype.serialize = function() {
      var field, fieldName, serialized, _ref;
      serialized = {};
      _ref = this.fields;
      for (fieldName in _ref) {
        field = _ref[fieldName];
        serialized[fieldName] = field.serialize();
      }
      return serialized;
    };

    Model.prototype.deserialize = function(data) {
      var field, fieldName, _ref, _results;
      _ref = this.fields;
      _results = [];
      for (fieldName in _ref) {
        field = _ref[fieldName];
        if (data[fieldName] != null) {
          _results.push(field.deserialize(data[fieldName]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Model.prototype.save = function() {
      return this.db().save(this.name(), this);
    };

    return Model;

  })(EventEmitter);

  Query = (function(_super) {
    __extends(Query, _super);

    Query.prototype.validOperators = ['gt', 'gte', 'lt', 'lte'];

    function Query(model) {
      this.model = model;
      this.filters = {};
      this.excludes = {};
    }

    Query.prototype.clone = function() {
      var q;
      q = new Query(this.model);
      q.filters = this.filters;
      q.excludes = this.excludes;
      return q;
    };

    Query.prototype.filter = function(filters) {
      var q;
      q = this.clone();
      q.combine(q.filters, filters);
      return q;
    };

    Query.prototype.exclude = function(excludes) {
      var q;
      q = this.clone();
      q.combine(q.excludes, excludes);
      return q;
    };

    Query.prototype.combine = function(set, inc) {
      var field, keys, options, _results;
      _results = [];
      for (field in inc) {
        options = inc[field];
        if (this.model.prototype._fields[field] == null) {
          throw new Errors.FieldDoesNotExist(field);
        }
        if (set[field] == null) {
          set[field] = {};
        }
        if (options instanceof Array) {
          _results.push(set[field] = options);
        } else if (options instanceof Object) {
          keys = Object.keys(options);
          keys = Utils.exclude(keys, this.validOperators);
          if (keys.length) {
            throw new Errors.InvalidOperator(keys[0]);
          }
          _results.push(Utils.extend(set[field], options));
        } else {
          _results.push(set[field] = options);
        }
      }
      return _results;
    };

    Query.prototype["delete"] = function() {
      return this.model.db["delete"](this.model.name, this);
    };

    Query.prototype.run = function() {
      return this.model.db.fetch(this.model.name, this);
    };

    return Query;

  })(EventEmitter);

  Fields = {};

  Fields.BaseField = function(options) {
    var _Field;
    _Field = (function(_super) {
      __extends(_Field, _super);

      function _Field(object) {
        this.object = object;
        this.options = options || {};
        this.set(this.options["default"] || null);
      }

      _Field.prototype.deserialize = function(fieldData) {
        if (fieldData != null) {
          return this.set(fieldData);
        }
      };

      _Field.prototype.serialize = function() {
        return this.value;
      };

      _Field.prototype.validate = function(value) {
        return true;
      };

      _Field.prototype.set = function(value) {
        if (value instanceof Function) {
          value = value(this);
        }
        if (this.validate(value)) {
          return this.value = value;
        } else {
          throw new Errors.ValidationFailed(value);
        }
      };

      _Field.prototype.get = function() {
        return this.value;
      };

      return _Field;

    })(EventEmitter);
    return _Field;
  };

  Fields.NumberField = function(options) {
    var _Field;
    _Field = (function(_super) {
      __extends(_Field, _super);

      function _Field() {
        return _Field.__super__.constructor.apply(this, arguments);
      }

      _Field.prototype.validate = function(value) {
        if (isNaN(Number(value))) {
          return false;
        }
        return true && (_Field.__super__.validate.call(this, value));
      };

      return _Field;

    })(Fields.BaseField(options));
    return _Field;
  };

  Fields.DateTimeField = function(options) {
    var _Field;
    _Field = (function(_super) {
      __extends(_Field, _super);

      function _Field() {
        return _Field.__super__.constructor.apply(this, arguments);
      }

      _Field.prototype.validate = function(value) {
        if (value == null) {
          return true;
        }
        if (value instanceof Date) {
          return true && (_Field.__super__.validate.call(this, value));
        }
        return false;
      };

      _Field.prototype.serialize = function() {
        if (this.value != null) {
          return this.value.getTime();
        }
        return null;
      };

      _Field.prototype.deserialize = function(fieldData) {
        return new Date(fieldData);
      };

      return _Field;

    })(Fields.BaseField(options));
    return _Field;
  };

  Fields.UUIDField = function(options) {
    var _Field;
    _Field = (function(_super) {
      __extends(_Field, _super);

      function _Field() {
        return _Field.__super__.constructor.apply(this, arguments);
      }

      _Field.prototype.validate = function(value) {
        var regex;
        regex = /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/i;
        return regex.test(value) && (_Field.__super__.validate.call(this, value));
      };

      return _Field;

    })(Fields.BaseField(options));
    return _Field;
  };

  this.EventEmitter = EventEmitter;

  this.Databases = Databases;

  this.Errors = Errors;

  this.Fields = Fields;

  this.Model = Model;

  this.Query = Query;

  this.Utils = Utils;

}).call(this);
